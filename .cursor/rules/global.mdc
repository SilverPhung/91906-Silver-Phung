---
alwaysApply: true
---

Design software by breaking functionality into well-defined components with a single responsibility (SRP) that each handle distinct concerns (SoC). Build these components to be open for extension but closed for modification (OCP), relying on abstractions rather than concrete implementations to reduce dependencies (DIP). Avoid duplicating code by adhering to the DRY principle, and always abstract complexity behind clear, simple interfaces to enhance maintainability and flexibility.

Use Clear and Descriptive Naming
Write Modular Code
Write Docstrings and Comments
Handle Exceptions Properly: Use try-except blocks for robust error handling to maintain program stability during unforeseen issues.